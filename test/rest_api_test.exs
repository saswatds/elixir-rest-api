defmodule RestApiTest.Router do
  use ExUnit.Case
  use Plug.Test

  @opts RestApi.Router.init([])

  test "GET / should return ok" do
    conn = conn(:get, "/")

    conn = RestApi.Router.call(conn, @opts)

    assert conn.state == :sent
    assert conn.status == 200
    assert conn.resp_body == "OK"
  end

  describe "Posts" do
    # The setup callback is called before each test and the on_exit after each of
    # the test is complete
    # We will use this hook to list all the mongo db collections and for each of
    # the collection to clear out the entire collection. This way for every test
    # case we will start from a clean slate
    setup do
      on_exit fn ->
        Mongo.show_collections(:mongo)
        |> Enum.each(fn col -> Mongo.delete_many!(:mongo, col, %{}) end)
      end
    end

    test "POST /post should return ok" do
      # Assert that there are no elements in the db
      assert Mongo.find(:mongo, "Posts", %{}) |> Enum.count == 0

      # Make an API to call create a post
      conn = conn(:post, "/post", %{name: "Post 1", content: "Content of post"})
      conn = RestApi.Router.call(conn, @opts)

      # Checking that request was actually sent
      assert conn.state == :sent

      # Checking that response code was 200
      assert conn.status == 200

      # Asserting that response body was what we expected
      # Note: We are using pattern matching here to perform the assertion
      # The id is autogenerated by mongodb so we have not way of predicting it
      # therefore we just use _ to match to anything but expect it to exist
      assert %{
        "id" => _,
        "content" => "Content of post",
        "name" => "Post 1"
      } = Jason.decode!(conn.resp_body)

      # Assert that there is something in the db
      # Task: It is very naive to check that the post was created. We should ideally
      # also check if the content was correct. Go ahead and try it out and post your
      # answer in the comment section below.
      assert Mongo.find(:mongo, "Posts", %{}) |> Enum.count == 1
    end
  end
end
